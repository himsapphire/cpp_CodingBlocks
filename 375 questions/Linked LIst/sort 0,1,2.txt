1. counting 0,1,2 and then adding new nodes   s.c. O(n), t.c. O(2n)

Node* temp=head;
        int x=0,y=0,z=0;
        while(temp!=NULL){
            if (temp->data==0)
              x++;
            else if(temp->data==1)
              y++;
            else
              z++;
              temp=temp->next;
        }
        temp=head;Node* n;
        
        while(x){
           n=new Node(0);
           temp->next=n;x--;
           temp=n;
        }
        while(y){
           n=new Node(1);
           temp->next=n;y--;
           temp=n;
        }
        while(z){
           n=new Node(2);
           temp->next=n;z--;
           temp=n;
        }
        return head->next;
    }

2.changing links and use of dummy nodes (copy)   O(n)  s.c O(1)

//Function to sort a linked list of 0s, 1s and 2s.
    //inserting at different lists
    void insertattail(Node* &tail, Node* curr){
        tail->next=curr;
        tail=curr;
    }
    
    Node* segregate(Node *head) {
        //taking dummy nodes heads and tails
        Node* zerohead= new Node(-1);
        Node* zerotail=zerohead;
        Node* onehead= new Node(-1);
        Node* onetail=onehead;
        Node* twohead= new Node(-1);
        Node* twotail=twohead;
        
        // Add code here
        Node* temp=head;
        while(temp!=NULL){
            int value= temp->data;
            if(value==0)
               insertattail(zerotail,temp);
            else if(value==1)
               insertattail(onetail,temp);
            else
               insertattail(twotail,temp);
               temp=temp->next;
        }
        
        //merging lists
        if(onehead->next!=NULL)
           zerotail->next=onehead->next;
        else
           zerotail->next=twohead->next;
        
        onetail->next=twohead->next;
        twotail->next=NULL;
        
        head=zerohead->next;
        delete zerohead;
        delete onehead;
        delete twohead;
        return head;
    }
};
