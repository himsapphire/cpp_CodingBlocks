1.recursive sol o(n1+n2) t.c.      o(n1+n2) space

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        //base cases
        if(list1==NULL)
            return list2;
        if(list2==NULL)
            return list1;
        
        ListNode* c;
        if(list1->val<list2->val){
            c=list1;
            c->next=mergeTwoLists(list1->next,list2);
        }
        else{
            c=list2;
            c->next=mergeTwoLists(list1,list2->next);}
        
        return c;
    }
};


another recursive  o(1) space   o(n1+n2)

ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
{
	if(l1 == NULL) return l2;
	if(l2 == NULL) return l1;

      // without taking a new pointer c each time, 

	if(l2->val <= l1->val) l2->next = mergeTwoLists(l1, l2->next);
	else
	{
		l1->next = mergeTwoLists(l1->next, l2);
		l2 = l1;
	}

	return l2;
}


Iterative Solution without dummy node o(n1+n2) o(1)


ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    if(l1 == NULL)
        return l2;
    if(l2 == NULL)
        return l1;
    
    ListNode* head, *curr;
    if(l1->val> l2->val){
        head = l2;
        l2 = l2->next;
    }
    else{
        head = l1;
        l1 = l1->next;
    }
    
    curr = head;
    while(l1 && l2){
        if(l1->val> l2->val){
            curr->next = l2;
            l2 = l2->next;
        }
        else{
            curr->next = l1;
            l1 = l1->next;
        }
        curr = curr->next;
    }
    if(l1)
        curr->next = l1;
    if(l2)
        curr->next = l2;
    
    return head;
}
Iterative solution with dummy node



ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    ListNode* dummy, *curr;
    dummy = new ListNode();
    curr = dummy;

    while(l1 && l2){
        if(l1->val> l2->val){
            curr->next = l2;
            l2 = l2->next;
        }
        else{
            curr->next = l1;
            l1 = l1->next;
        }
        curr = curr->next;
    }
    if(l1) curr->next = l1;
    if(l2) curr->next = l2;
    return dummy->next;
}